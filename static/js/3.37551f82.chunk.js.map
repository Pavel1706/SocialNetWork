{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/myPosts/MyPosts.module.css","components/Profile/myPosts/Post/Post.module.css","components/Profile/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/myPosts/Post/Post.tsx","components/Profile/myPosts/MyPosts.tsx","components/Profile/myPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","value","onChange","e","currentTarget","onBlur","updateStatus","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","profile","error","onSubmit","className","style","formSummaryError","createField","Input","type","Textarea","Object","keys","contacts","map","key","contact","ProfileInfo","isOwner","savePhoto","saveProfile","useDispatch","Preloader","loading","alt","src","descriptionBlock","photo","photos","small","target","files","initialValues","formData","console","log","then","goToEditMode","ProfileData","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contacts","Post","like","setLike","since","message","PostReduxForm","Field","styles","input","placeholder","name","component","button","SuperDialogsContainer","connect","state","profilePage","dispatch","addPost","addPostAC","newText","posts","d","id","newPostBody","reset","dreams","Profile","compose","isAuth","auth","authorizedUserId","data","setUserProfile","setProfileTC","getStatus","getProfileStatusTC","upDateStatus","updateStatusTC","savePhotoTC","saveProfileTC","withRouter","userId","match","params","toString","history","push"],"mappings":"mGACAA,EAAOC,QAAU,CAAC,iBAAmB,sCAAsC,MAAQ,6B,oBCAnFD,EAAOC,QAAU,CAAC,MAAQ,uBAAuB,OAAS,wBAAwB,OAAS,wBAAwB,MAAQ,yB,oBCA3HD,EAAOC,QAAU,CAAC,MAAQ,oBAAoB,KAAO,qB,4FCOxCC,EAAyB,SAACC,GAA8B,IAAD,EAEnCC,oBAAS,GAF0B,mBAE3DC,EAF2D,KAEjDC,EAFiD,OAGvCF,mBAASD,EAAMI,QAHwB,mBAG3DA,EAH2D,KAGnDC,EAHmD,KAKhEC,qBAAU,WACND,EAAUL,EAAMI,UAClB,CAACJ,EAAMI,SAgBT,OAAO,mCACH,iCACMF,GACE,8BACI,sBAAMK,cAhBC,WACnBJ,GAAY,IAeA,SAAwCH,EAAMI,WAGrDF,GACD,8BACI,uBAAOM,WAAW,EACXC,MAAOL,EACPM,SAhBE,SAACC,GAClBN,EAAUM,EAAEC,cAAcH,QAgBXI,OArBM,WACrBV,GAAY,GACZH,EAAMc,aAAaV,c,0CCuCZW,EAFmBC,YAAoC,CAACC,KAAM,gBAA3CD,EArC9B,SAAC,GAAkC,IAAjCE,EAAgC,EAAhCA,aAAcC,EAAkB,EAAlBA,QAASC,EAAS,EAATA,MAEzB,OAAO,uBAAMC,SAAUH,EAAhB,UAEJ,8BAAK,4CACHE,GAAS,qBAAKE,UAAWC,IAAMC,iBAAtB,SACLJ,IAGL,gCACI,0CADJ,OACyBK,YAA6B,YAAa,WAAY,GAAGC,QAElF,gCACI,kDADJ,KAC+BD,YAA6B,GAAI,iBAAiB,GAAIC,IAAO,CAACC,KAAK,gBAElG,gCACI,uDADJ,IAEKF,YAA6B,yBAA0B,4BAA6B,GAAIG,QAE7F,gCACI,0CACCH,YAA6B,WAAY,UAAW,GAAIG,QAE7D,gCACI,yCADJ,KACsBC,OAAOC,KAAKX,EAAQY,UAAUC,KAAI,SAAAC,GACpD,OAAO,qBAAeX,UAAWC,IAAMW,QAAhC,SACH,8BAAID,EAAJ,KAAWR,YAAYQ,EAAK,WAAYA,EAAK,GAAIP,SADpCO,SAKrB,uBAAON,KAAK,mBCpCPQ,EAAqC,SAAC,GAOO,IANHhB,EAME,EANFA,QACAf,EAKE,EALFA,OACAU,EAIE,EAJFA,aACAsB,EAGE,EAHFA,QACAC,EAEE,EAFFA,UACAC,EACE,EADFA,YACE,GACpCC,cACetC,oBAAS,IAFY,mBAE9CC,EAF8C,KAEpCC,EAFoC,KAKrD,IAAKgB,EACD,OAAO,cAACqB,EAAA,EAAD,CAAWC,SAAS,IAoB/B,OACI,gCACI,8BACI,qBAAKC,IAAK,OACLC,IAAI,6GAEb,sBAAKrB,UAAWC,IAAMqB,iBAAtB,UAEI,qBAAKtB,UAAWC,IAAMsB,MACjBF,IAAKxB,EAAQ2B,OAAOC,OAAS,iEACjCX,GAAW,uBAAOT,KAAM,OAAQjB,SA3BnB,SAACC,GACnBA,EAAEqC,OAAOC,OACTZ,EAAU1B,EAAEqC,OAAOC,MAAM,OA2BpB/C,EACK,cAAC,EAAD,CAAiBgD,cAAe/B,EAASA,QAASA,EAASE,SAvB5D,SAAC8B,GACdC,QAAQC,IAAIF,GACZb,EAAYa,GACPG,MAAK,WACFnD,GAAY,SAoBN,cAAC,EAAD,CAAaoD,aAAc,WACzBpD,GAAY,IACbgB,QAASA,EAASiB,QAASA,IAElC,cAAC,EAAD,CAAwBhC,OAAQA,EAAQU,aAAcA,WAgBhE0C,EAAyC,SAAC,GAAsC,IAArCrC,EAAoC,EAApCA,QAASiB,EAA2B,EAA3BA,QAASmB,EAAkB,EAAlBA,aAC/D,OAAO,gCACFnB,GAAW,8BACR,wBAAQqB,QAASF,EAAjB,oBAEJ,gCACI,0CADJ,KACuBpC,EAAQuC,YAE/B,gCACI,kDADJ,KAC+BvC,EAAQwC,eAAiB,MAAQ,QAE/DxC,EAAQwC,gBACT,gCACI,uDADJ,KACoCxC,EAAQyC,6BAG5C,gCACI,yCADJ,KACsBzC,EAAQ0C,WAE9B,gCACI,yCADJ,KAEIhC,OACKC,KAAKX,EAAQY,UACbC,KAAI,SAACC,GACF,OAAO,cAAC,EAAD,CAAoB6B,aAAc7B,EACxB8B,aAAc5C,EAAQY,SAASE,IAD1BA,aAYpC+B,EAAwC,SAAC,GAAkC,IAAjCF,EAAgC,EAAhCA,aAAcC,EAAkB,EAAlBA,aAC1D,OAAO,gCAAK,4BAAID,IAAT,KAA6BC,M,oCCjH3BE,EAAO,SAACjE,GAAoB,IAAD,EACdC,mBAASD,EAAMkE,MADD,mBAC7BA,EAD6B,KACvBC,EADuB,KAKpC,OACI,sBAAK7C,UAAWC,IAAM6C,MAAtB,UACI,qBAAK1B,IAAK,OACNC,IAAI,wGACP3C,EAAMqE,QACP,gCACA,qBAAKZ,QAAS,WAAKU,EAAQD,EAAK,IAAK5C,UAAWC,IAAM2C,OACjDA,S,gBC0CXI,EAAgBtD,YAAwB,CAACC,KAAM,eAA/BD,EAlBlB,SAAChB,GAEG,OACI,uBAAMqB,SAAUrB,EAAMkB,aAAtB,UACI,8BACI,cAACqD,EAAA,EAAD,CAAOjD,UAAWkD,IAAOC,MAAOC,YAAa,qBAAsBC,KAAM,cAAeC,UAAWhD,QAIvG,8BACI,wBAAQN,UAAWkD,IAAOK,OAA1B,8B,QCtBPC,EAAwBC,aAhBf,SAACC,GACnB,MAAO,CACHC,YAAaD,EAAMC,gBAKF,SAACC,GACtB,MAAO,CACHC,QAAS,SAAC1E,GACNyE,EAASE,YAAU3E,QAMMsE,EDxBd,SAAC/E,GACpB,IAAMkF,EAAS3C,cAEX8C,EAAUrF,EAAMiF,YAAYK,MAAMtD,KAAI,SAAAuD,GAAC,OAAI,cAAC,EAAD,CAAiBlB,QAASkB,EAAElB,QAASH,KAAMqB,EAAErB,MAAlCqB,EAAEC,OAS5D,OACI,sBAAKlE,UAAWkD,IAAOJ,MAAvB,UACI,4CACA,gCACI,cAACE,EAAD,CAAejD,SAZX,SAAC8B,GACbnD,EAAMmF,QAAQhC,EAASsC,aACvBP,EAASQ,YAAM,mBAWP,8BAAML,OAGV,qBAAK/D,UAAWkD,IAAOmB,eEftBC,EAAU,SAAC5F,GAEpB,OACI,gCACI,cAAC,EAAD,CAAgBoC,QAASpC,EAAMoC,QAClBjB,QAASnB,EAAMmB,QACff,OAAQJ,EAAMI,OACdU,aAAcd,EAAMc,aAC7BuB,UAAWrC,EAAMqC,UACLC,YAAatC,EAAMsC,cAEnC,cAACwC,EAAD,Q,gBC+CGe,sBACXd,aAToB,SAACC,GAAD,MAA6C,CACjE7D,QAAS6D,EAAMC,YAAY9D,QAC3Bf,OAAQ4E,EAAMC,YAAY7E,OAC1B0F,OAAQd,EAAMe,KAAKD,OACnBE,iBAAkBhB,EAAMe,KAAKE,KAAKT,MAKT,CACrBU,eAAgBC,IAChBC,UAAWC,IACXC,aAAcC,IACdlE,UAAWmE,IACXlE,YAAamE,MAEjBC,IARWb,EArCf,SAA0B7F,GACtB,IAAI2G,EAAS3G,EAAM4G,MAAMC,OAAOF,OAC1BzB,EAAW3C,cAcjB,OAbAjC,qBAAU,WAEDqG,IACDA,EAAS3G,EAAMgG,iBAAiBc,YAE/BH,GACD3G,EAAM+G,QAAQC,KAAK,UAGvB9B,EAASiB,aAAcQ,IACvBzB,EAASmB,YAAmBM,MAC7B,CAACA,IAGA,cAAC,EAAD,CAASxF,QAASnB,EAAMmB,QACfiB,SAAUuE,EACVvG,OAAQJ,EAAMI,OACdU,aAAcd,EAAMsG,aACpBjE,UAAWrC,EAAMqC,UACjBC,YAAatC,EAAMsC","file":"static/js/3.37551f82.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__2sBp-\",\"photo\":\"ProfileInfo_photo__2meMt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"since\":\"MyPosts_since__h59lM\",\"dreams\":\"MyPosts_dreams__2Tw1D\",\"button\":\"MyPosts_button__1ZHJ0\",\"input\":\"MyPosts_input__30Nhk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"since\":\"Post_since__SftL-\",\"like\":\"Post_like__3d_qK\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\ntype ProfileStatusType = {\r\n    status: string\r\n    updateStatus: (value: string) => void\r\n}\r\n\r\n\r\nexport const ProfileStatusWithHooks = (props: ProfileStatusType) => {\r\n\r\n    let [editMode, setEditMode]= useState(false)\r\n    let [status, setStatus]= useState(props.status)\r\n\r\n    useEffect(()=>{\r\n        setStatus(props.status)\r\n    },[props.status])\r\n\r\n\r\n\r\n    const activateEditMode=()=>{\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode=()=>{\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n    const onStatusChange=(e:ChangeEvent<HTMLInputElement>)=> {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n\r\n    return <>\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}>{props.status}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input autoFocus={true}\r\n                       value={status}\r\n                       onChange={onStatusChange}\r\n                       onBlur={deactivateEditMode}\r\n                />{}\r\n            </div>\r\n            }\r\n        </div>\r\n    </>\r\n\r\n}\r\n\r\n\r\n","import React from \"react\";\r\nimport {NewProfileType} from \"../../../Redux/profileReducer\";\r\nimport {createField, GetStringKeys, Input, Textarea,} from \"../../common/FormsControls/FormsControls\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport style from \"../../LoginComponent/Login.module.css\";\r\nimport {requiredField} from \"../../../utils/validators/validators\";\r\nimport {AppStateType} from \"../../../Redux/reduxStore\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\n// type ProfileDataFormType = {\r\n//     data: NewProfileType\r\n//     isOwner: boolean\r\n//     goToEditMode:()=>void\r\n// }\r\n\r\n\r\ntype PropsType={\r\n    profile: NewProfileType\r\n}\r\n\r\ntype ProfileTypeKeys = GetStringKeys<NewProfileType>\r\n\r\n const ProfileDataForm: React.FC<InjectedFormProps<NewProfileType, PropsType> & PropsType> =\r\n    ({handleSubmit, profile, error})=>{\r\n\r\n    return <form onSubmit={handleSubmit} >\r\n\r\n       <div><button>save</button></div>\r\n        {error && <div className={style.formSummaryError}>\r\n            {error}\r\n        </div>\r\n        }\r\n        <div>\r\n            <b>Full name</b>:   {createField<ProfileTypeKeys>('Full name', \"fullName\", [],Input, )}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job</b>: {createField<ProfileTypeKeys>('', 'lookingForAJob',[], Input, {type:'checkbox'} )}\r\n        </div>\r\n        <div>\r\n            <b>My professional skills</b>:\r\n            {createField<ProfileTypeKeys>('My professional skills', 'lookingForAJobDescription', [], Textarea)}\r\n        </div>\r\n        <div>\r\n            <b>About me:</b>\r\n            {createField<ProfileTypeKeys>('About me', 'aboutMe', [], Textarea)}\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n            return <div key={key} className={style.contact}>\r\n                <b>{key}: {createField(key, 'contacts'+ key, [], Input )}</b>\r\n                    </div>\r\n        })}\r\n        </div>\r\n        <input type='checkbox'/>\r\n    </form>\r\n}\r\n\r\n\r\n\r\n\r\n const ProfileDataFormReduxForm = reduxForm<NewProfileType,PropsType>({form: 'edit-profile'})(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm","import React, {ChangeEvent, useState} from 'react';\r\nimport style from './ProfileInfo.module.css';\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport {ContactsType, NewProfileType} from \"../../../Redux/profileReducer\";\r\nimport {ProfileStatusWithHooks} from \"../ProfileStatusWithHooks\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport ProfileDataForm from './ProfileDataForm';\r\n\r\ntype ProfileType = {\r\n    profile: NewProfileType | null\r\n    status: string\r\n    updateStatus: (value: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (photo: any) => void\r\n    saveProfile: (profile: NewProfileType) => Promise<any>\r\n}\r\n\r\n\r\nexport const ProfileInfo: React.FC<ProfileType> = ({\r\n                                                       profile,\r\n                                                       status,\r\n                                                       updateStatus,\r\n                                                       isOwner,\r\n                                                       savePhoto,\r\n                                                       saveProfile\r\n                                                   }) => {\r\n    const dispatch = useDispatch()\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n\r\n    if (!profile) {\r\n        return <Preloader loading={true}/>\r\n    }\r\n\r\n    const mainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n\r\n    const onSubmit = (formData: NewProfileType) => {\r\n        console.log(formData)\r\n        saveProfile(formData)\r\n            .then(() => {\r\n                setEditMode(false)\r\n            })\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <img alt={'foto'}\r\n                     src='https://p.bigstockphoto.com/GeFvQkBbSLaMdpKXF1Zv_bigstock-Aerial-View-Of-Blue-Lakes-And--227291596.jpg'/>\r\n            </div>\r\n            <div className={style.descriptionBlock}>\r\n\r\n                <img className={style.photo}\r\n                     src={profile.photos.small || 'https://avatarko.ru/img/kartinka/7/zhivotnye_sobaka_6243.jpg'}/>\r\n                {isOwner && <input type={'file'} onChange={mainPhotoSelected}/>}\r\n\r\n                {editMode\r\n                    ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit}/>\r\n                    : <ProfileData goToEditMode={() => {\r\n                        setEditMode(true)\r\n                    }} profile={profile} isOwner={isOwner}/>}\r\n\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\ntype ProfileDataType = {\r\n    profile: NewProfileType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\n\r\n\r\nconst ProfileData: React.FC<ProfileDataType> = ({profile, isOwner, goToEditMode}) => {\r\n    return <div>\r\n        {isOwner && <div>\r\n            <button onClick={goToEditMode}>edit</button>\r\n        </div>}\r\n        <div>\r\n            <b>Full name</b>: {profile.fullName}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job</b>: {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n        </div>\r\n        {profile.lookingForAJob &&\r\n        <div>\r\n            <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n        </div>\r\n        }\r\n        <div>\r\n            <b>About me</b>: {profile.aboutMe}\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>: {\r\n            Object\r\n                .keys(profile.contacts)\r\n                .map((key) => {\r\n                    return <Contacts key={key} contactTitle={key}\r\n                                     contactValue={profile.contacts[key as keyof ContactsType]}/>\r\n                })}\r\n        </div>\r\n    </div>\r\n}\r\n\r\ntype ContactsPropsType = {\r\n    contactTitle: string\r\n    contactValue: string | null\r\n}\r\n\r\nconst Contacts: React.FC<ContactsPropsType> = ({contactTitle, contactValue}) => {\r\n    return <div><b>{contactTitle}</b>: {contactValue}</div>\r\n}","import React, {useState} from 'react';\r\nimport style from './Post.module.css';\r\n\r\n\r\nexport type Posttype ={\r\n    message : string\r\n    like: number\r\n}\r\n\r\nexport const Post = (props:Posttype) => {\r\n    const [like, setLike]=useState(props.like)\r\n\r\n\r\n\r\n    return (\r\n        <div className={style.since}>\r\n            <img alt={'foto'}\r\n                src='https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcT6C1rS1qYf8Z6en9SWnpaIOarrDPK_G66T0Q&usqp=CAU'/>\r\n            {props.message}\r\n            <div >\r\n            <div onClick={()=>{setLike(like+1)}} className={style.like}></div>\r\n                {like}\r\n            </div>\r\n\r\n        </div>\r\n\r\n\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport styles from './MyPosts.module.css';\r\nimport {Post} from \"./Post/Post\";\r\nimport {MyPostsPropsType} from \"./MyPostsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm, reset} from 'redux-form';\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\n\r\nexport const MyPosts = (props: MyPostsPropsType) => {\r\n    const dispatch=useDispatch()\r\n\r\n    let newText = props.profilePage.posts.map(d => <Post key={d.id} message={d.message} like={d.like}/>)\r\n    let onAddPost = (formData: FormDataType) => {\r\n        props.addPost(formData.newPostBody)\r\n        dispatch(reset('postMessage'))\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className={styles.since}>\r\n            <h3> My posts </h3>\r\n            <div>\r\n                <PostReduxForm onSubmit={onAddPost} />\r\n                <div>{newText}</div>\r\n            </div>\r\n\r\n            <div className={styles.dreams}>\r\n\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n\r\n}\r\n\r\ntype FormDataType = {\r\n    newPostBody: string\r\n}\r\n\r\n\r\n\r\nconst AddPostForm: React.FC<InjectedFormProps<FormDataType>> =\r\n    (props) => {\r\n\r\n        return (\r\n            <form onSubmit={props.handleSubmit} >\r\n                <div>\r\n                    <Field className={styles.input} placeholder={'Enter your message'} name={'newPostBody'} component={Textarea}\r\n\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <button className={styles.button}>add post</button>\r\n                </div>\r\n\r\n\r\n            </form>\r\n        )\r\n    }\r\n\r\nconst PostReduxForm = reduxForm<FormDataType>({form: 'postMessage'})(AddPostForm)","import React from 'react';\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from \"../../../Redux/reduxStore\";\r\nimport {addPostAC,  InitialStateType} from \"../../../Redux/profileReducer\";\r\nimport {Dispatch} from 'redux';\r\n\r\n\r\ntype MapStatePropsType = {\r\n    profilePage: InitialStateType\r\n\r\n}\r\ntype MapDispatchPropsType = {\r\n    addPost: (value:string) => void\r\n}\r\nexport type MyPostsPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        profilePage: state.profilePage\r\n    }\r\n}\r\n\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        addPost: (value:string) => {\r\n            dispatch(addPostAC(value))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const SuperDialogsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);","import React from 'react';\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {NewProfileType} from \"../../Redux/profileReducer\";\r\nimport {SuperDialogsContainer} from \"./myPosts/MyPostsContainer\";\r\n\r\ntype ProfilePropsType = {\r\n    profile: NewProfileType | null\r\n    status: string\r\n    updateStatus:(value:string)=> void\r\n    isOwner: boolean\r\n    savePhoto:(photo:any)=>void\r\n    saveProfile: (profile: NewProfileType) => Promise<any>\r\n}\r\n\r\nexport const Profile = (props:ProfilePropsType) => {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo    isOwner={props.isOwner}\r\n                         profile={props.profile}\r\n                         status={props.status}\r\n                         updateStatus={props.updateStatus}\r\n                savePhoto={props.savePhoto}\r\n                            saveProfile={props.saveProfile}\r\n            />\r\n            <SuperDialogsContainer      />\r\n        </div>\r\n    )\r\n}","import React, {useEffect} from 'react';\r\nimport {Profile} from \"./Profile\";\r\nimport {connect, useDispatch} from 'react-redux';\r\nimport {AppStateType} from \"../../Redux/reduxStore\";\r\nimport {\r\n    getProfileStatusTC,\r\n    NewProfileType, savePhotoTC,\r\n    saveProfileTC,\r\n    setProfileTC,\r\n    updateStatusTC\r\n} from \"../../Redux/profileReducer\";\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {compose} from 'redux';\r\n\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    profile: NewProfileType | null\r\n    status: string\r\n    isAuth: boolean\r\n    authorizedUserId: number\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    setUserProfile: (profile: NewProfileType) => void\r\n    upDateStatus: (value: string) => void\r\n    savePhoto:(photo:any)=> void\r\n    saveProfile: (profile: NewProfileType) => Promise<any>\r\n}\r\ntype UsersStateType = MapStatePropsType & MapDispatchPropsType\r\ntype PropsType = RouteComponentProps<PathParamsType> & UsersStateType\r\n\r\nfunction ProfileContainer(props: PropsType) {\r\n    let userId = props.match.params.userId\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        debugger\r\n        if (!userId) {\r\n            userId = props.authorizedUserId.toString()\r\n        }\r\n        if (!userId) {\r\n            props.history.push(\"/login\")\r\n\r\n        }\r\n        dispatch(setProfileTC(+userId))\r\n        dispatch(getProfileStatusTC(userId))\r\n    }, [userId])\r\n\r\n    return (\r\n        <Profile profile={props.profile}\r\n                 isOwner={!userId}\r\n                 status={props.status}\r\n                 updateStatus={props.upDateStatus}\r\n                 savePhoto={props.savePhoto}\r\n                 saveProfile={props.saveProfile}\r\n        />\r\n    )\r\n\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    isAuth: state.auth.isAuth,\r\n    authorizedUserId: state.auth.data.id,\r\n})\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        setUserProfile: setProfileTC,\r\n        getStatus: getProfileStatusTC,\r\n        upDateStatus: updateStatusTC,\r\n        savePhoto: savePhotoTC,\r\n        saveProfile: saveProfileTC\r\n    }),\r\n    withRouter,\r\n)(ProfileContainer)"],"sourceRoot":""}