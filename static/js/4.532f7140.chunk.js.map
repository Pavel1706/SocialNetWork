{"version":3,"sources":["components/Conversation/Conversation.module.css","components/Conversation/Message.tsx","components/Conversation/Message/MessageItem.tsx","components/Conversation/Message/MessageItemContainer.tsx","components/Conversation/Conversation.tsx"],"names":["module","exports","Message","props","className","style","message","maxLength50","maxLengthCreator","MessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","input","placeholder","name","component","Textarea","validate","requiredField","add","SuperMessageContainer","connect","state","messagePage","newMessage","isAuth","auth","dispatch","sendMessage","value","addNewMessageAC","useDispatch","messageElement","messageData","map","m","id","text","dialogs","messages","formData","newMessageBody","reset","to","Conversation"],"mappings":"mGACAA,EAAOC,QAAU,CAAC,KAAO,2BAA2B,QAAU,8BAA8B,OAAS,6BAA6B,OAAS,6BAA6B,SAAW,+BAA+B,QAAU,8BAA8B,IAAM,0BAA0B,MAAQ,8B,wJCSrRC,EAAS,SAACC,GAEnB,OACI,qBAAKC,UAAWC,IAAMC,QAAtB,SAAgCH,EAAMG,W,wBC6BxCC,EAAcC,YAAiB,IAqB/BC,EAAmBC,YAAwB,CAACC,KAAM,iBAA/BD,EAnBrB,SAACP,GAGG,OACI,uBAAMS,SAAUT,EAAMU,aAAtB,UACI,8BACI,cAACC,EAAA,EAAD,CAAOV,UAAWC,IAAMU,MAAOC,YAAa,gBAAiBC,KAAM,iBAC5DC,UAAWC,IACXC,SAAU,CAACC,IAAcd,OAGpC,8BAAK,wBAAQH,UAAWC,IAAMiB,IAAzB,8B,SCpBRC,EAAwBC,aAnBX,SAACC,GACvB,MAAO,CACHC,YAAaD,EAAMC,YACnBC,WAAYF,EAAMC,YAAYC,WAC9BC,OAAQH,EAAMI,KAAKD,WAME,SAACE,GAC1B,MAAO,CACHC,YAAa,SAACC,GACVF,EAASG,YAAgBD,QAMAR,EDxBV,SAACrB,GACxB,IAAM2B,EAASI,cAEXC,EAAiBhC,EAAMuB,YAAYU,YAAYC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAqBhC,QAASgC,EAAEhC,SAAjBgC,EAAEC,OAO9E,OAAKpC,EAAMyB,OAGN,sBAAKxB,UAAWC,IAAMmC,KAAtB,UACI,qBAAKpC,UAAWC,IAAMoC,UAItB,sBAAKrC,UAAWC,IAAMqC,SAAtB,UACKP,EAED,cAAC1B,EAAD,CAAkBG,SAhBR,SAAC+B,GACnBxC,EAAM4B,YAAYY,EAASC,gBAC3Bd,EAASe,YAAM,2BAGM,cAAC,IAAD,CAAUC,GAAI,cEjB9BC,EAAe,WACxB,OACI,cAACxB,EAAD","file":"static/js/4.532f7140.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"Conversation_text__1RDFq\",\"dialogs\":\"Conversation_dialogs__4efHp\",\"active\":\"Conversation_active__28yAU\",\"dialog\":\"Conversation_dialog__1bjM8\",\"messages\":\"Conversation_messages__RohnW\",\"message\":\"Conversation_message__2QVbn\",\"add\":\"Conversation_add__FusoX\",\"input\":\"Conversation_input__3hX4H\"};","import React from 'react';\r\nimport style from \"./Conversation.module.css\";\r\n\r\n\r\n\r\ntype MessageType = {\r\n    message: string\r\n}\r\n\r\n\r\nexport const Message =(props: MessageType)=>{\r\n\r\n    return(\r\n        <div className={style.message}>{props.message}</div>\r\n    )\r\n}","import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport {Field, InjectedFormProps, reduxForm, reset} from 'redux-form';\r\nimport style from '../Conversation.module.css'\r\nimport {Message} from \"../Message\";\r\nimport {AllMessageType} from \"./MessageItemContainer\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, requiredField} from \"../../../utils/validators/validators\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\n\r\nexport const MessageItem = (props: AllMessageType) => {\r\n    const dispatch=useDispatch()\r\n\r\n    let messageElement = props.messagePage.messageData.map(m => <Message key ={m.id} message={m.message}/>)\r\n\r\n    const addNewMessage = (formData: FormDataType) => {\r\n        props.sendMessage(formData.newMessageBody)\r\n        dispatch(reset('dialogMessage'))\r\n    }\r\n\r\n   if (!props.isAuth) return <Redirect to={'/login'}/>\r\n    return (\r\n\r\n        <div className={style.text}>\r\n            <div className={style.dialogs}>\r\n\r\n            </div>\r\n\r\n            <div className={style.messages}>\r\n                {messageElement}\r\n\r\n                <MessageReduxForm onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\ntype FormDataType = {\r\n    newMessageBody: string\r\n}\r\nconst maxLength50 = maxLengthCreator(50)\r\nconst AddMessageForm: React.FC<InjectedFormProps<FormDataType>> =\r\n    (props) => {\r\n\r\n\r\n        return (\r\n            <form onSubmit={props.handleSubmit}>\r\n                <div>\r\n                    <Field className={style.input} placeholder={'Enter message'} name={'newMessageBody'}\r\n                           component={Textarea}\r\n                           validate={[requiredField,maxLength50 ]}\r\n                    />\r\n                </div>\r\n                <div><button className={style.add}>add text</button></div>\r\n\r\n\r\n\r\n            </form>\r\n        )\r\n    }\r\n\r\nconst MessageReduxForm = reduxForm<FormDataType>({form: 'dialogMessage' })(AddMessageForm)\r\n\r\n","import React from 'react';\r\nimport {AppStateType} from \"../../../Redux/reduxStore\";\r\nimport {MessageItem} from \"./MessageItem\";\r\nimport {Dispatch} from 'redux';\r\nimport {connect} from 'react-redux';\r\nimport {addNewMessageAC, InitialStateMessageType} from \"../../../Redux/messageReducer\";\r\n\r\ntype MessageStatePropsType = {\r\n    messagePage: InitialStateMessageType\r\n    newMessage: string\r\n    isAuth:boolean\r\n\r\n}\r\ntype MapDispatchPropsType = {\r\n    sendMessage: (value:string) => void\r\n}\r\nlet messageStateToProps = (state: AppStateType): MessageStatePropsType => {\r\n    return {\r\n        messagePage: state.messagePage,\r\n        newMessage: state.messagePage.newMessage,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport type AllMessageType = MessageStatePropsType & MapDispatchPropsType\r\n\r\nlet messageDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        sendMessage: (value: string) => {\r\n            dispatch(addNewMessageAC(value))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const SuperMessageContainer = connect(messageStateToProps, messageDispatchToProps)(MessageItem);","import React from 'react';\r\nimport {SuperMessageContainer} from \"./Message/MessageItemContainer\";\r\n\r\n\r\nexport const Conversation = () => {\r\n    return (\r\n        <SuperMessageContainer/>\r\n    )\r\n}\r\n"],"sourceRoot":""}