{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/myPosts/MyPosts.module.css","components/Profile/myPosts/Post/Post.module.css","components/Profile/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/myPosts/Post/Post.tsx","components/Profile/myPosts/MyPosts.tsx","components/Profile/myPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","value","onChange","e","currentTarget","onBlur","updateStatus","ProfileInfo","profile","alt","src","className","style","descriptionBlock","photo","photos","small","Preloader","loading","Post","like","setLike","since","message","onClick","PostReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","styles","input","placeholder","name","component","Textarea","button","SuperDialogsContainer","connect","state","profilePage","dispatch","addPost","addPostAC","useDispatch","newText","posts","map","d","id","formData","newPostBody","reset","dreams","Profile","compose","isAuth","auth","authorizedUserId","data","setUserProfile","setProfileTC","getStatus","getProfileStatusTC","upDateStatus","updateStatusTC","withRouter","userId","match","params","toString"],"mappings":"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","file":"static/js/3.895d7544.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__2sBp-\",\"photo\":\"ProfileInfo_photo__2meMt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"since\":\"MyPosts_since__h59lM\",\"dreams\":\"MyPosts_dreams__2Tw1D\",\"button\":\"MyPosts_button__1ZHJ0\",\"input\":\"MyPosts_input__30Nhk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"since\":\"Post_since__SftL-\",\"like\":\"Post_like__3d_qK\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\ntype ProfileStatusType = {\r\n    status: string\r\n    updateStatus: (value: string) => void\r\n}\r\n\r\n\r\nexport const ProfileStatusWithHooks = (props: ProfileStatusType) => {\r\n\r\n    let [editMode, setEditMode]= useState(false)\r\n    let [status, setStatus]= useState(props.status)\r\n\r\n    useEffect(()=>{\r\n        setStatus(props.status)\r\n    },[props.status])\r\n\r\n\r\n\r\n    const activateEditMode=()=>{\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode=()=>{\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n    const onStatusChange=(e:ChangeEvent<HTMLInputElement>)=> {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n\r\n    return <>\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}>{props.status}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input autoFocus={true}\r\n                       value={status}\r\n                       onChange={onStatusChange}\r\n                       onBlur={deactivateEditMode}\r\n                />{}\r\n            </div>\r\n            }\r\n        </div>\r\n    </>\r\n\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport style from './ProfileInfo.module.css';\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport {NewProfileType} from \"../../../Redux/profileReducer\";\r\nimport {ProfileStatusWithHooks} from \"../ProfileStatusWithHooks\";\r\n\r\ntype ProfileType = {\r\n    profile: NewProfileType | null\r\n    status: string\r\n    updateStatus: (value:string)=> void\r\n}\r\n\r\n\r\nexport const ProfileInfo = (props:ProfileType ) => {\r\n\r\n    if(!props.profile){\r\n        return <Preloader loading={true} />\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <img alt={'foto'}\r\n                    src='https://p.bigstockphoto.com/GeFvQkBbSLaMdpKXF1Zv_bigstock-Aerial-View-Of-Blue-Lakes-And--227291596.jpg'/>\r\n            </div>\r\n            <div className={style.descriptionBlock}>\r\n\r\n                <img className={style.photo}  src={props.profile.photos.small||'https://avatarko.ru/img/kartinka/7/zhivotnye_sobaka_6243.jpg'}/>\r\n\r\n                <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport style from './Post.module.css';\r\n\r\n\r\nexport type Posttype ={\r\n    message : string\r\n    like: number\r\n}\r\n\r\nexport const Post = (props:Posttype) => {\r\n    const [like, setLike]=useState(props.like)\r\n\r\n\r\n\r\n    return (\r\n        <div className={style.since}>\r\n            <img alt={'foto'}\r\n                src='https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcT6C1rS1qYf8Z6en9SWnpaIOarrDPK_G66T0Q&usqp=CAU'/>\r\n            {props.message}\r\n            <div >\r\n            <div onClick={()=>{setLike(like+1)}} className={style.like}></div>\r\n                {like}\r\n            </div>\r\n\r\n        </div>\r\n\r\n\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport styles from './MyPosts.module.css';\r\nimport {Post} from \"./Post/Post\";\r\nimport {MyPostsPropsType} from \"./MyPostsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm, reset} from 'redux-form';\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\n\r\nexport const MyPosts = (props: MyPostsPropsType) => {\r\n    const dispatch=useDispatch()\r\n\r\n    let newText = props.profilePage.posts.map(d => <Post key={d.id} message={d.message} like={d.like}/>)\r\n    let onAddPost = (formData: FormDataType) => {\r\n        props.addPost(formData.newPostBody)\r\n        dispatch(reset('postMessage'))\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className={styles.since}>\r\n            <h3> My posts </h3>\r\n            <div>\r\n                <PostReduxForm onSubmit={onAddPost} />\r\n                <div>{newText}</div>\r\n            </div>\r\n\r\n            <div className={styles.dreams}>\r\n\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n\r\n}\r\n\r\ntype FormDataType = {\r\n    newPostBody: string\r\n}\r\n\r\n\r\n\r\nconst AddPostForm: React.FC<InjectedFormProps<FormDataType>> =\r\n    (props) => {\r\n\r\n        return (\r\n            <form onSubmit={props.handleSubmit} >\r\n                <div>\r\n                    <Field className={styles.input} placeholder={'Enter your message'} name={'newPostBody'} component={Textarea}\r\n\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <button className={styles.button}>add post</button>\r\n                </div>\r\n\r\n\r\n            </form>\r\n        )\r\n    }\r\n\r\nconst PostReduxForm = reduxForm<FormDataType>({form: 'postMessage'})(AddPostForm)","import React from 'react';\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from \"../../../Redux/reduxStore\";\r\nimport {addPostAC,  InitialStateType} from \"../../../Redux/profileReducer\";\r\nimport {Dispatch} from 'redux';\r\n\r\n\r\ntype MapStatePropsType = {\r\n    profilePage: InitialStateType\r\n\r\n}\r\ntype MapDispatchPropsType = {\r\n    addPost: (value:string) => void\r\n}\r\nexport type MyPostsPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        profilePage: state.profilePage\r\n    }\r\n}\r\n\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        addPost: (value:string) => {\r\n            dispatch(addPostAC(value))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const SuperDialogsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);","import React from 'react';\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {NewProfileType} from \"../../Redux/profileReducer\";\r\nimport {SuperDialogsContainer} from \"./myPosts/MyPostsContainer\";\r\n\r\ntype ProfilePropsType = {\r\n    profile: NewProfileType | null\r\n    status: string\r\n    updateStatus:(value:string)=> void\r\n}\r\n\r\nexport const Profile = (props:ProfilePropsType) => {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile}\r\n                         status={props.status}\r\n                         updateStatus={props.updateStatus}/>\r\n            <SuperDialogsContainer      />\r\n        </div>\r\n    )\r\n}","import React, {useEffect} from 'react';\r\nimport {Profile} from \"./Profile\";\r\nimport {connect, useDispatch} from 'react-redux';\r\nimport {AppStateType} from \"../../Redux/reduxStore\";\r\nimport {\r\n    getProfileStatusTC,\r\n    NewProfileType,\r\n    setProfileTC,\r\n     updateStatusTC\r\n} from \"../../Redux/profileReducer\";\r\nimport { RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport { compose } from 'redux';\r\n\r\n\r\n\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    profile: NewProfileType | null\r\n    status: string\r\n    isAuth: boolean\r\n    authorizedUserId: number\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    setUserProfile: (profile: NewProfileType) => void\r\n    upDateStatus: (value:string)=> void\r\n}\r\ntype UsersStateType = MapStatePropsType & MapDispatchPropsType\r\ntype PropsType = RouteComponentProps<PathParamsType> & UsersStateType\r\n\r\n function ProfileContainer(props: PropsType) {\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n\r\n        let userId = props.match.params.userId\r\n\r\n        if (!userId) {\r\n            userId = props.authorizedUserId.toString()\r\n        }\r\n        //     if(!userId){\r\n        //         props.history.push(\"/login\")\r\n        //\r\n        // }\r\n        dispatch(setProfileTC(userId))\r\n            dispatch(getProfileStatusTC(userId))\r\n    }, [])\r\n\r\n    return (\r\n        <Profile profile={props.profile}\r\n                 status={props.status}\r\n                 updateStatus={props.upDateStatus}/>\r\n    )\r\n\r\n}\r\n\r\n\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    isAuth: state.auth.isAuth,\r\n    authorizedUserId: state.auth.data.id,\r\n})\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {setUserProfile: setProfileTC,\r\n        getStatus:getProfileStatusTC,\r\n        upDateStatus:updateStatusTC}),\r\n    withRouter,\r\n)(ProfileContainer)"],"sourceRoot":""}